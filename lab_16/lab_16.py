# -*- coding: utf-8 -*-
"""
Created on Thu Mar 30 19:13:37 2023

@author: admin
"""
"""
Задача о рюкзаке (knapsack problem) – это задача комбинаторной оптимизации, заключающаяся
в выборе из заданного набора предметов такого подмножества, чтобы их стоимость была максимальной,
 а суммарный вес не превышал заданную вместимость рюкзака.

Задача о рюкзаке имеет множество вариаций, в зависимости от условий и ограничений. 
Рассмотрим классическую задачу, в которой каждый предмет можно выбрать только один 
раз или не выбирать вовсе.

Для решения задачи о рюкзаке можно использовать динамическое программирование, 
разбивая исходную задачу на подзадачи и сохраняя результаты вычислений для 
последующего использования.
"""

# список предметов с весами и стоимостью
items = [('item1', 6, 30), ('item2', 3, 14), ('item3', 4, 16), ('item4', 2, 9)]

# вместимость рюкзака
capacity = 10

# создаем двумерный массив размером (количество предметов + 1) x (вместимость + 1)
# и заполняем его нулями
dp = [[0 for j in range(capacity + 1)] for i in range(len(items) + 1)]

# проходим по списку предметов и заполняем двумерный массив
for i in range(1, len(items) + 1):
    for j in range(1, capacity + 1):
        # если вес предмета меньше текущей вместимости
        if items[i-1][1] <= j:
            # выбираем максимальное значение между стоимостью предмета +
            # лучшей стоимостью, полученной для предметов до этого, или лучшей
            # стоимостью, полученной для предметов до этого без этого предмета
            dp[i][j] = max(items[i-1][2] + dp[i-1][j - items[i-1][1]], dp[i-1][j])
        # если вес предмета больше текущей вместимости
        else:
            # сохраняем лучшую стоимость для предметов до этого без этого предмета
            dp[i][j] = dp[i-1][j]

# выводим результат - максимальную стоимость
print(f"Максимальная стоимость: {dp[-1][-1]}")