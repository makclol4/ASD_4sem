# -*- coding: utf-8 -*-


# Определим функцию, которая будет вычислять префикс-функцию строки
def compute_prefix_function(pattern):
    m = len(pattern)
    pi = [0] * m # создадим список для значений префикс-функции
    k = 0 # инициализируем индекс для обхода образца
    for q in range(1, m): # обходим образец с индекса 1
        while k > 0 and pattern[k] != pattern[q]: # корректируем индекс, если символы не совпадают
            k = pi[k-1] # переходим к предыдущему префиксу
        if pattern[k] == pattern[q]: # если символы совпадают, увеличиваем индекс
            k += 1
        pi[q] = k # заполняем значение префикс-функции
    return pi

# Определим функцию, которая будет искать строку-образец в строке-тексте
def kmp_search(text, pattern):
    m = len(pattern)
    n = len(text)
    pi = compute_prefix_function(pattern) # вычислим префикс-функцию для образца
    q = 0 # инициализируем индекс для обхода текста
    for i in range(n): # обходим текст с индекса 0
        while q > 0 and pattern[q] != text[i]: # корректируем индекс, если символы не совпадают
            q = pi[q-1] # переходим к предыдущему префиксу
        if pattern[q] == text[i]: # если символы совпадают, увеличиваем индекс
            q += 1
        if q == m: # если достигнуто терминальное состояние, значит строка-образец найдена
            return i - m + 1 # возвращаем индекс первого символа найденного образца в строке-тексте
    return -1 # если образец не найден, возвращаем -1

# считываем строку из файла
input_file = 'input.txt'
with open(input_file) as f:
    text = f.readline().strip()

# ищем образец в строке
pattern = input('Введите строку-образец: ')
index = kmp_search(text, pattern)

# записываем результат в файл
output_file = 'output.txt'
with open(output_file, 'w') as f:
    if index != -1:
        f.write(f'Образец "{pattern}" найден в позиции {index} в строке-тексте: "{text}"')
    else:
        f.write(f'Образец "{pattern}" не найден в строке-тексте: "{text}"')